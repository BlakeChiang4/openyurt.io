{
  "filename": "yurt-app-manager.md",
  "__html": "<h1>Use yurt-app-manager to manage edge nodes and workloads</h1>\n<p>In this tutorial, we will show how the yurt-app-manager helps users manage\nthere edge nodes and workload.\nSuppose you have a Kubernetes cluster in an Openyurt environment, or a native Kubernetes cluster with at least two nodes.</p>\n<h2>Install yurt-app-manager</h2>\n<h3>1. install yurt-app-manager operator</h3>\n<p>Go to OpenYurt root directory:</p>\n<pre><code class=\"language-bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$GOPATH</span>/src/github.com/openyurtio/openyurt\n</code></pre>\n<pre><code class=\"language-bash\">kubectl apply -f config/yurt-app-manager/release/yurt-app-manager-v0.3.0.yaml\n</code></pre>\n<p>Wait for the yurt-app-manager operator  to be created successfully</p>\n<pre><code class=\"language-bash\">kubectl get pod -n kube-system |grep yurt-app-manager\n</code></pre>\n<h2>How to Use</h2>\n<p>The Examples of NodePool and UnitedDeployment are in <code>config/yurt-app-manager/samples/</code> directory</p>\n<h3>NodePool</h3>\n<ul>\n<li>1 create an nodepool</li>\n</ul>\n<pre><code class=\"language-bash\">cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1alpha1\nkind: NodePool\nmetadata:\n  name: Pool-A\nspec:\n  <span class=\"hljs-built_in\">type</span>: Edge\n  annotations:\n    apps.openyurt.io/example: <span class=\"hljs-built_in\">test</span>-Pool-A\n  labels:\n    apps.openyurt.io/example: <span class=\"hljs-built_in\">test</span>-Pool-A\n  taints:\n  - key: apps.openyurt.io/example\n    value: <span class=\"hljs-built_in\">test</span>-Pool-A\n    effect: NoSchedule\nEOF\n</code></pre>\n<ul>\n<li>2 Get NodePool</li>\n</ul>\n<pre><code class=\"language-bash\">$ kubectl get np Pool-A\n\nNAME       TYPE   READYNODES   NOTREADYNODES   AGE\nPool-A     Edge                                28s\n</code></pre>\n<ul>\n<li>3 Add Node To NodePool</li>\n</ul>\n<p>Add an node into <code>Pool-A</code> NodePool, Set the <code>apps.openyurt.io/desired-nodepool</code> label on the host, and value is the name of the Pool-A NodePool</p>\n<pre><code class=\"language-bash\">$ kubectl label node {Your_Node_Name} apps.openyurt.io/desired-nodepool=Pool-A\n\n{Your_Node_Name} labeled\n</code></pre>\n<pre><code class=\"language-bash\">$ kubectl get np Pool-A\nNAME       TYPE   READYNODES   NOTREADYNODES   AGE\nPool-A     Edge   1            0               5m19s\n</code></pre>\n<p>Once a Node adds a NodePool, it inherits the annotations, labels, and taints defined in the nodepool Spec,at the same time, the Node will add a new tag: <code>apps.openyurt.io/nodepool</code>. For Example:</p>\n<pre><code class=\"language-bash\">$ kubectl get node {Your_Node_Name} -o yaml\n\napiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    apps.openyurt.io/example: <span class=\"hljs-built_in\">test</span>-Pool-A\n  labels:\n    apps.openyurt.io/desired-nodepool: Pool-A\n    apps.openyurt.io/example: <span class=\"hljs-built_in\">test</span>-Pool-A\n    apps.openyurt.io/nodepool: Pool-A\nspec:\n  taints:\n  - effect: NoSchedule\n    key: apps.openyurt.io/example\n    value: <span class=\"hljs-built_in\">test</span>-Pool-A\nstatus:\n***\n</code></pre>\n<h3>UnitedDeployment</h3>\n<ul>\n<li>1 create an uniteddeployment which use deployment template</li>\n</ul>\n<pre><code class=\"language-bash\">cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1alpha1\nkind: UnitedDeployment\nmetadata:\n  labels:\n    controller-tools.k8s.io: <span class=\"hljs-string\">\"1.0\"</span>\n  name: ud-test\nspec:\n  selector:\n    matchLabels:\n      app: ud-test\n  workloadTemplate:\n    deploymentTemplate:\n      metadata:\n        labels:\n          app: ud-test\n      spec:\n        template:\n          metadata:\n            labels:\n              app: ud-test\n          spec:\n            containers:\n              - name: nginx\n                image: nginx:1.19.1\n  topology:\n    pools:\n    - name: edge\n      nodeSelectorTerm:\n        matchExpressions:\n        - key: apps.openyurt.io/nodepool\n          operator: In\n          values:\n          - Pool-A\n      replicas: 3\n      tolerations:\n      - effect: NoSchedule\n        key: apps.openyurt.io/example\n        operator: Exists\n  revisionHistoryLimit: 5\nEOF\n</code></pre>\n<ul>\n<li>2 Get UnitedDeployment</li>\n</ul>\n<pre><code class=\"language-bash\">$ kubectl get ud\nNAME      READY   WORKLOADTEMPLATE   AGE\nud-test   1       Deployment         23s\n</code></pre>\n<p>check the sub deployment created by yurt-app-manager controller</p>\n<pre><code class=\"language-bash\">$ kubectl get deploy\nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\nud-test-edge-ttthd   1/1     1            1           100s\n</code></pre>\n<p>check the pod created by UnitedeDeployment , and you will find that these pods will be created on all the hosts under the <code>Pool-A</code> NodePool,  and all the pods created by UnitedDeployment use the same image: <code>nginx:1.19.1</code></p>\n<pre><code>$ kubectl get pod -l app=ud-test\n\nNAME                                  READY   STATUS    RESTARTS   AGE\nud-test-edge-ttthd-5db8f454dd-8jd4l   1/1     Running   0          7m\nud-test-edge-ttthd-5db8f454dd-ggmfb   1/1     Running   0          34s\nud-test-edge-ttthd-5db8f454dd-r6ptr   1/1     Running   0          34s\n</code></pre>\n<ul>\n<li>3 Change UnitedDeployment workloadTemplate's image\nchange image from <code>nginx:1.19.1</code> to <code>nginx:1.19.3</code>, and you will find that all pods created by UnitedDeployment use the same image:<code>nginx:1.19.3</code></li>\n</ul>\n<pre><code class=\"language-bash\">kubectl patch ud ud-test --<span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">'json'</span> -p <span class=\"hljs-string\">'[{\"op\": \"replace\", \"path\": \"/spec/workloadTemplate/deploymentTemplate/spec/template/spec/containers/0/image\", \"value\": \"nginx:1.19.3\"}]'</span>\nkubectl get pod -l app=ud-test\n</code></pre>\n<ul>\n<li>4 Scale the number of pods under a node pool</li>\n</ul>\n<pre><code class=\"language-bash\">$ kubectl patch ud ud-test --<span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">'json'</span> -p <span class=\"hljs-string\">'[{\"op\": \"replace\", \"path\": \"/spec/topology/pools/0/replicas\", \"value\": 6}]'</span>\n</code></pre>\n<p>You will find that the number of pods will be expanded to six</p>\n<pre><code class=\"language-bash\">$ kubectl get pod -l app=ud-test\nNAME                                  READY   STATUS    RESTARTS   AGE\nud-test-edge-ttthd-5bbb4b8664-2f5ss   1/1     Running   0          10m\nud-test-edge-ttthd-5bbb4b8664-8sjs7   1/1     Running   0          3m20s\nud-test-edge-ttthd-5bbb4b8664-99dml   1/1     Running   0          10m\nud-test-edge-ttthd-5bbb4b8664-dvb8s   1/1     Running   0          10m\nud-test-edge-ttthd-5bbb4b8664-lxhgr   1/1     Running   0          3m20s\nud-test-edge-ttthd-5bbb4b8664-zj8ls   1/1     Running   0          3m20s\n</code></pre>\n",
  "link": "/zh-cn/docs/tutorial/yurt-app-manager.html",
  "meta": {}
}