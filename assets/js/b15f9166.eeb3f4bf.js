"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[2786],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,c(c({ref:t},l),{},{components:n})):r.createElement(h,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9883:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={title:"Architecture"},s=void 0,u={unversionedId:"core-concepts/architecture",id:"core-concepts/architecture",isDocsHomePage:!1,title:"Architecture",description:"OpenYurt follows a classic cloud-edge architecture design.",source:"@site/docs/core-concepts/architecture.md",sourceDirName:"core-concepts",slug:"/core-concepts/architecture",permalink:"/docs/core-concepts/architecture",editUrl:"https://github.com/openyurtio/openyurt.io/edit/master/docs/core-concepts/architecture.md",tags:[],version:"current",lastUpdatedBy:"Peeknut",lastUpdatedAt:1637131172,formattedLastUpdatedAt:"11/17/2021",frontMatter:{title:"Architecture"},sidebar:"docs",previous:{title:"Yurtctl convert/revert",permalink:"/docs/openyurt-install/yurtctl-convert-revert"},next:{title:"Yurt App Manager",permalink:"/docs/best-practices/yurt-app-manager"}},l=[],p={toc:l};function d(e){var t=e.components,i=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"OpenYurt follows a classic cloud-edge architecture design.\nIt uses a centralized Kubernetes control plane residing in the cloud site to\nmanage multiple edge nodes residing in the edge sites. Each edge node has moderate compute resources available in\norder to run edge applications plus the required OpenYurt components. The edge nodes in a cluster can span\nmultiple physical regions, which are referred to as ",(0,a.kt)("inlineCode",{parentName:"p"},"Pools")," in OpenYurt."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(3971).Z})),(0,a.kt)("p",null,"The above figure demonstrates the core OpenYurt architecture. The major components consist of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"YurtHub"),": A node daemon that serves as a proxy for the outbound traffic from typical\nKubernetes node daemons such as Kubelet, Kubeproxy, CNI plugins and so on. It caches the\nstates of all the API resources that they might access in the edge node's local storage.\nIn case the edge node is disconnected to the cloud, YurtHub can recover the states when the node restarts."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Yurt controller manager"),": It supplements the upstream node controller to support edge computing requirements.\nFor example, Pods in the nodes that are in the ",(0,a.kt)("inlineCode",{parentName:"li"},"autonomy")," mode will not be evicted from APIServer even if the\nnode heartbeats are missing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Yurt app manager"),": It manages two CRD resources introduced in OpenYurt: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/openyurtio/openyurt/blob/master/docs/enhancements/20201211-nodepool_uniteddeployment.md"},"NodePool"),"\nand ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/openyurtio/openyurt/blob/master/docs/enhancements/20201211-nodepool_uniteddeployment.md"},"YurtAppSet")," (previous UnitedDeployment). The former provides a convenient\nmanagement for a pool of nodes within the same region or site. The latter defines a pool based application management workload."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Yurt tunnel (server/agent)"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"TunnelServer")," connects with the ",(0,a.kt)("inlineCode",{parentName:"li"},"TunnelAgent")," daemon running in each edge node via a\nreverse proxy to establish a secure network access between the cloud site control plane and the edge nodes\nthat are connected to the intranet.")),(0,a.kt)("p",null,"In addition, OpenYurt also includes auxiliary controllers for integration and customization purposes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Node resource manager"),": It manages additional edge node resources such as LVM, QuotaPath and Persistent Memory.\nPlease refer to ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/openyurtio/node-resource-manager"},"node-resource-manager")," repo for more details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Integrating EdgeX Foundry platform and uses Kubernetes CRD to manage edge devices!"))),(0,a.kt)("p",null,"OpenYurt introduces ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/yurt-edgex-manager"},"Yurt-edgex-manager")," to manage the lifecycle of the EdgeX Foundry software suite,\nand ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openyurtio/yurt-device-controller"},"Yurt-device-controller")," to manage edge devices hosted by EdgeX Foundry\nvia Kubernetes custom resources. Please refer to the respective repos for more details."))}d.isMDXComponent=!0},3971:function(e,t,n){t.Z=n.p+"assets/images/architecture-a3dcd2a758bb9c978f52c8a61c6a98f6.png"}}]);