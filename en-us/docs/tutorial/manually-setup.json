{
  "filename": "manually-setup.md",
  "__html": "<h1>Manually Setup</h1>\n<p>This tutorial shows how to setup OpenYurt cluster manually. The cluster used in this tutorial is a\ntwo-nodes ACK(version 1.14.8) cluster, and all the yaml files used in this tutorial can be found\nat <code>config/setup/</code>.</p>\n<h2>Label cloud nodes and edge nodes</h2>\n<p>When disconnected from the apiserver, only the pod running on the autonomous edge node will\nbe prevented from being evicted from nodes. Therefore, we first need to divide nodes into two categories, the cloud node\nand the edge node, by using label <code>alibabacloud.com/is-edge-worker</code>. Assume that the given Kubernetes cluster\nhas two nodes,</p>\n<pre><code class=\"language-bash\">$ kubectl get nodes\nNAME                     STATUS   ROLES    AGE     VERSION\nus-west-1.192.168.0.87   Ready    &lt;none&gt;   3d23h   v1.14.8-aliyun.1\nus-west-1.192.168.0.88   Ready    &lt;none&gt;   3d23h   v1.14.8-aliyun.1\n</code></pre>\n<p>and we will use node <code>us-west-1.192.168.0.87</code> as the cloud node.</p>\n<p>We label the cloud node with value <code>false</code>,</p>\n<pre><code class=\"language-bash\">$ kubectl label node us-west-1.192.168.0.87 alibabacloud.com/is-edge-worker=<span class=\"hljs-literal\">false</span>\nnode/us-west-1.192.168.0.87 labeled\n</code></pre>\n<p>and the edge node with value <code>true</code>.</p>\n<pre><code class=\"language-bash\">$ kubectl label node us-west-1.192.168.0.88 alibabacloud.com/is-edge-worker=<span class=\"hljs-literal\">true</span>\nnode/us-west-1.192.168.0.88 labeled\n</code></pre>\n<p>To active the autonomous mode, we annotate the edge node by typing following command</p>\n<pre><code class=\"language-bash\">$ kubectl annotate node us-west-1.192.168.0.88 node.beta.alibabacloud.com/autonomy=<span class=\"hljs-literal\">true</span>\nnode/us-west-1.192.168.0.88 annotated\n</code></pre>\n<h2>Setup Yurt-controller-manager</h2>\n<p>Next, we need to deploy the Yurt controller manager, which prevents apiserver from evicting pods running on the\nautonomous edge nodes during disconnection.</p>\n<pre><code class=\"language-bash\">$ kc ap -f config/setup/yurt-controller-manager.yaml\ndeployment.apps/yurt-controller-manager created\n</code></pre>\n<h2>Disable the default nodelifecycle controller</h2>\n<p>To allow the yurt-controller-mamanger to work properly, we need to turn off the default nodelifecycle controller.\nThe nodelifecycle controller can be disabled by restarting the kube-controller-manager with a proper <code>--controllers</code>\noption. Assume that the original option looks like <code>--controllers=*,bootstrapsigner,tokencleaner</code>, to disable\nthe nodelifecycle controller, we change the option to <code>--controllers=*,bootstrapsigner,tokencleaner,-nodelifecycle</code>.</p>\n<p>If the kube-controller-manager is deployed as a static pod on the master node, and you have the permission to log in\nto the master node, then above operations can be done by revising the file\n<code>/etc/kubernetes/manifests/kube-controller-manager.yaml</code>. After revision, the kube-controller-manager will be\nrestarted automatically.</p>\n<h2>Setup Yurthub</h2>\n<p>After the Yurt controller manager is up and running, we will setup Yurthub as the static pod. Before proceeding,\nplease get the apiserver's address (i.e., ip:port), which will be used to replace the place holder in the template\nfile <code>config/setup/yurthub.yaml</code>. In the following command, we assume that the address of the apiserver is 1.2.3.4:5678</p>\n<pre><code class=\"language-bash\">$ cat config/setup/yurthub.yaml | \nsed <span class=\"hljs-string\">'s|__pki_path__|/etc/kubernetes/pki|;\ns|__kubernetes_service_host__|1.2.3.4|;\ns|__kubernetes_service_port_https__|5678|'</span> &gt; /tmp/yurthub-ack.yaml &amp;&amp;\nscp -i &lt;yourt-ssh-identity-file&gt; /tmp/yurthub-ack.yaml root@us-west-1.192.168.0.88:/etc/kubernetes/manifests\n</code></pre>\n<p>and the Yurthub will be ready in minutes.</p>\n<h2>Reset the Kubelet</h2>\n<p>By now, we have setup all required components for the OpenYurt cluster, next, we only need to reset the\nkubelet service to let it access the apiserver through the yurthub (The following steps assume that we are logged\nin to the edge node as the root user).</p>\n<p>To do so, we create a new kubeconfig file for the kubelet service based on the original one (i.e., <code>/etc/kubernetes/kubelet.confg</code>).</p>\n<pre><code class=\"language-bash\">$ mkdir -p /var/lib/openyurt &amp;&amp; cp /etc/kubernetes/kubelet.conf /var/lib/openyurt\n</code></pre>\n<p>As kubelet will connect to the Yurthub through http, we need to remove unnecessary field from the newly created kubeconfig file</p>\n<pre><code class=\"language-bash\">sed -i <span class=\"hljs-string\">'/certificate-authority-data/d;\n    /client-key/d;\n    /client-certificate/d;\n    /user:/d;\n    s/ https.*/ http:\\/\\/127.0.0.1:10261/g'</span> /var/lib/openyurt/kubelet.conf\n</code></pre>\n<p>In order to let kubelet to use the revised kubeconfig, we edit the drop-in file of the kubelet\nservice (i.e., <code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code>)</p>\n<pre><code class=\"language-bash\">sed -i <span class=\"hljs-string\">\"s|--kubeconfig=.*kubelet.conf|--kubeconfig=<span class=\"hljs-variable\">$OPENYURT_DIR</span>\\/kubelet.conf|g\"</span> \\\n    /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n</code></pre>\n<p>Finally, we restart the kubelet service</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># assume we are logged in to the edge node already </span>\n$ systemctl daemon-reload &amp;&amp; systemctl restart\n</code></pre>\n",
  "link": "/en-us/docs/tutorial/manually-setup.html",
  "meta": {}
}