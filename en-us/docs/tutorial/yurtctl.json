{
  "filename": "yurtctl.md",
  "__html": "<h1><code>Yurtctl</code> tutorial</h1>\n<p>This tutorial demonstrates how to use <code>yurtctl</code> to install/uninstall OpenYurt.\nPlease refer to the <a href=\"https://github.com/alibaba/openyurt#getting-started\">Getting Started</a> section on the README page to prepare and build binary to <code>_output/bin/yurtctl</code> .\nWe assume a minikube cluster (<a href=\"https://github.com/kubernetes/minikube/releases/tag/v1.0.0\">version 1.14 or less</a>)\nis installed.</p>\n<h2>Convert a minikube cluster</h2>\n<p>Let us use <code>yurtctl</code> to convert a standard Kubernetes cluster to an OpenYurt cluster.</p>\n<ol>\n<li>Run the following command</li>\n</ol>\n<pre><code class=\"language-bash\">$ _output/bin/yurtctl convert --provider minikube\n</code></pre>\n<ol start=\"2\">\n<li><code>yurtctl</code> will install all required components and reset the kubelet in the edge node. The output looks like:</li>\n</ol>\n<pre><code class=\"language-bash\">convert.go:148] mark minikube as the edge-node\nconvert.go:178] deploy the yurt controller manager\nconvert.go:190] deploying the yurt-hub and resetting the kubelet service...\nutil.go:137] servant job(yurtctl-servant-convert-minikube) has succeeded\n</code></pre>\n<ol start=\"3\">\n<li>yurt controller manager and yurthub Pods will be up and running in one minute. Let us verify them:</li>\n</ol>\n<pre><code class=\"language-bash\">$ kubectl get deploy yurt-controller-manager -n kube-system\nNAME            READY   UP-TO-DATE   AVAILABLE   AGE\nyurt-ctrl-mgr   1/1     1            1           23h\n$ kubectl get po yurt-hub-minikube -n kube-system\nNAME                READY   STATUS    RESTARTS   AGE\nyurt-hub-minikube   1/1     Running   0          23h\n</code></pre>\n<ol start=\"4\">\n<li>Next, we mark desired edge nodes as autonomous (only pods running on the autonomous edge nodes will be prevented from being evicted during disconnection):</li>\n</ol>\n<pre><code class=\"language-bash\">$ _output/bin/yurtctl markautonomous\nI0602 14:11:08.610222   89160 markautonomous.go:149] mark minikube-m02 as autonomous\n</code></pre>\n<ol start=\"5\">\n<li>As the minikube cluster only contains one node, the node will be marked as an autonomous edge node. Let us verify this by inspecting the node's labels and annotations:</li>\n</ol>\n<pre><code>$ kubectl describe node | grep Labels -A 3\nLabels:      alibabacloud.com/is-edge-worker=true\n$ kubectl describe node | grep Annotations -A 3\nAnnotations: node.beta.alibabacloud.com/autonomy: true\n</code></pre>\n<p>By now, the OpenYurt cluster is ready. Users will not notice any differences compared to native Kubernetes when operating the cluster.\nIf you login to the node, you will find the local cache has been populated:</p>\n<pre><code>$ minikube ssh\n$ ls /etc/kubernetes/cache/kubelet/\nconfigmaps  events  leases  nodes  pods  secrets  services\n</code></pre>\n<h3>Test node autonomy</h3>\n<p>To test if edge node autonomy works as expected, we will simulate a node &quot;offline&quot; scenario.</p>\n<ol>\n<li>Let's first create a sample pod:</li>\n</ol>\n<pre><code class=\"language-bash\">kubectl apply -f-&lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: bbox\nspec:\n  containers:\n  - image: busybox\n    <span class=\"hljs-built_in\">command</span>:\n    - top\n    name: bbox\nEOF\n</code></pre>\n<ol start=\"2\">\n<li>Make the edge node &quot;offline&quot; by changing the <code>yurthub</code>'s server-addr to an unreachable address:</li>\n</ol>\n<pre><code class=\"language-bash\">$ minikube ssh\n$ sudo sed -i <span class=\"hljs-string\">'s|--server-addr=.*|--server-addr=https://1.1.1.1:1111|'</span> /etc/kubernetes/manifests/yurt-hub.yaml \n</code></pre>\n<ol start=\"3\">\n<li>Now <code>yurthub</code> is disconnected from the apiserver and works in offline mode. To verify this, we can do the following:</li>\n</ol>\n<pre><code class=\"language-bash\">$ minikube ssh\n$ curl -s http://127.0.0.1:10261\n{\n  <span class=\"hljs-string\">\"kind\"</span>: <span class=\"hljs-string\">\"Status\"</span>,\n  <span class=\"hljs-string\">\"metadata\"</span>: {\n\n  },\n  <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"Failure\"</span>,\n  <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"request( get : /) is not supported when cluster is unhealthy\"</span>,\n  <span class=\"hljs-string\">\"reason\"</span>: <span class=\"hljs-string\">\"BadRequest\"</span>,\n  <span class=\"hljs-string\">\"code\"</span>: 400\n}\n</code></pre>\n<ol start=\"4\">\n<li>After 40 seconds, the edge node status becomes <code>NotReady</code>, but the pod/bbox won't be evicted and keeps running on the node:</li>\n</ol>\n<pre><code class=\"language-bash\">$ kubectl get node &amp;&amp; kubectl get po\nNAME       STATUS     ROLES    AGE   VERSION\nminikube   NotReady   master   58m   v1.18.2\nNAME   READY   STATUS    RESTARTS   AGE\nbbox   1/1     Running   0          19m\n</code></pre>\n<h2>Convert a multi-nodes Kubernetes cluster</h2>\n<p>An OpenYurt cluster may consist of some edge nodes and some nodes in the cloud site.\n<code>yurtctl</code> allows users to specify a list of cloud nodes that won't be converted.</p>\n<ol>\n<li>Start with a <a href=\"https://cn.aliyun.com/product/kubernetes\">two-nodes ack cluster</a>,</li>\n</ol>\n<pre><code class=\"language-bash\">$ kubectl get node \nNAME                     STATUS   ROLES    AGE   VERSION\nus-west-1.192.168.0.87   Ready    &lt;none&gt;   19h   v1.14.8-aliyun.1\nus-west-1.192.168.0.88   Ready    &lt;none&gt;   19h   v1.14.8-aliyun.1\n</code></pre>\n<ol start=\"2\">\n<li>You can convert only one node to edge node(i.e., minikube-m02) by using this command:</li>\n</ol>\n<pre><code class=\"language-bash\">$ _output/bin/yurtctl convert --provider ack --cloud-nodes us-west-1.192.168.0.87\nI0529 11:21:05.835781    9231 convert.go:145] mark us-west-1.192.168.0.87 as the cloud-node\nI0529 11:21:05.861064    9231 convert.go:153] mark us-west-1.192.168.0.88 as the edge-node\nI0529 11:21:05.951483    9231 convert.go:183] deploy the yurt controller manager\nI0529 11:21:05.974443    9231 convert.go:195] deploying the yurt-hub and resetting the kubelet service...\nI0529 11:21:26.075075    9231 util.go:147] servant job(yurtctl-servant-convert-us-west-1.192.168.0.88) has succeeded\n</code></pre>\n<ol start=\"3\">\n<li>Node <code>us-west-1.192.168.0.87</code> will be marked as a non-edge node. You can verify this by inspecting its labels:</li>\n</ol>\n<pre><code class=\"language-bash\">$ kubectl describe node us-west-1.192.168.0.87 | grep Labels\nLabels:             alibabacloud.com/is-edge-worker=<span class=\"hljs-literal\">false</span>\n</code></pre>\n<ol start=\"4\">\n<li>Same as before, we make desired edge nodes autonomous:</li>\n</ol>\n<pre><code class=\"language-bash\">$ _output/bin/yurtctl markautonomous\nI0602 11:22:05.610222   89160 markautonomous.go:149] mark us-west-1.192.168.0.88 as autonomous\n</code></pre>\n<ol start=\"5\">\n<li>When the OpenYurt cluster contains cloud nodes, yurt controller manager will be deployed on the cloud node (in this case, the node <code>us-west-1.192.168.0.87</code>):</li>\n</ol>\n<pre><code class=\"language-bash\">$ kubectl get pods -A -o=custom-columns=<span class=\"hljs-string\">'NAME:.metadata.name,NODE:.spec.nodeName'</span>\nNAME                                               NODE\nyurt-controller-manager-6947f6f748-lxfdx           us-west-1.192.168.0.87\n</code></pre>\n<h2>Revert/Uninstall OpenYurt</h2>\n<p>Using <code>yurtctl</code> to revert an OpenYurt cluster can be done by doing the following:</p>\n<pre><code>$ _output/bin/yurtctl revert\nrevert.go:100] label alibabacloud.com/is-edge-worker is removed\nrevert.go:110] yurt controller manager is removed\nrevert.go:124] ServiceAccount node-controller is created\nutil.go:137] servant job(yurtctl-servant-revert-minikube-m02) has succeeded\nrevert.go:133] yurt-hub is removed, kubelet service is reset\n</code></pre>\n<p>Note that before performing the uninstall, please make sure all edge nodes are reachable from the apiserver.</p>\n<h2>Troubleshooting</h2>\n<h3>1. Failure due to pulling image timeout</h3>\n<p>The default timeout value of cluster conversion is 2 minutes. Sometimes pulling the related images\nmight take more than 2 minutes. To avoid the conversion failure due to pulling images timeout, you can pull all images on the node manually\nor use automation tools such as <code>broadcastjob</code>(from <a href=\"https://github.com/openkruise/kruise/blob/master/docs/concepts/broadcastJob/README.md\">Kruise</a>) in advance.</p>\n<h3>2. Adhoc failure recovery</h3>\n<p>In case any adhoc failure makes the Kubelet fail to communicate with APIServer, one can recover the original Kubelet setup by\nrunning the following command in edge node directly:</p>\n<pre><code>$ sudo sed -i &quot;s|--kubeconfig=.*kubelet.conf|--kubeconfig=/etc/kubernetes/kubelet.conf|g;&quot; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf &amp;&amp; sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart kubelet.service\n</code></pre>\n",
  "link": "/en-us/docs/tutorial/yurtctl.html",
  "meta": {}
}